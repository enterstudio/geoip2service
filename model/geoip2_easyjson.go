// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package model

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_1007f982_decode_github_com_oschwald_geoip2service_model_City(in *jlexer.Lexer, out *City) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			easyjson_1007f982_decode_anonymous(in, &out.City)
		case "continent":
			easyjson_1007f982_decode_anonymous1(in, &out.Continent)
		case "country":
			easyjson_1007f982_decode_anonymous2(in, &out.Country)
		case "location":
			easyjson_1007f982_decode_anonymous3(in, &out.Location)
		case "postal":
			easyjson_1007f982_decode_anonymous4(in, &out.Postal)
		case "registered_country":
			easyjson_1007f982_decode_anonymous2(in, &out.RegisteredCountry)
		case "represented_country":
			easyjson_1007f982_decode_anonymous5(in, &out.RepresentedCountry)
		case "subdivisions":
			in.Delim('[')
			if !in.IsDelim(']') {
				out.Subdivisions = make([]struct {
					GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
					IsoCode   string            "json:\"iso_code\" maxminddb:\"iso_code\""
					Names     map[string]string "json:\"names\" maxminddb:\"names\""
				}, 0, 2)
			} else {
				out.Subdivisions = nil
			}
			for !in.IsDelim(']') {
				var v1 struct {
					GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
					IsoCode   string            "json:\"iso_code\" maxminddb:\"iso_code\""
					Names     map[string]string "json:\"names\" maxminddb:\"names\""
				}
				easyjson_1007f982_decode_anonymous2(in, &v1)
				out.Subdivisions = append(out.Subdivisions, v1)
				in.WantComma()
			}
			in.Delim(']')
		case "traits":
			easyjson_1007f982_decode_anonymous6(in, &out.Traits)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_1007f982_encode_github_com_oschwald_geoip2service_model_City(out *jwriter.Writer, in City) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"city\":")
	easyjson_1007f982_encode_anonymous(out, in.City)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"continent\":")
	easyjson_1007f982_encode_anonymous1(out, in.Continent)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"country\":")
	easyjson_1007f982_encode_anonymous2(out, in.Country)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"location\":")
	easyjson_1007f982_encode_anonymous3(out, in.Location)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"postal\":")
	easyjson_1007f982_encode_anonymous4(out, in.Postal)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"registered_country\":")
	easyjson_1007f982_encode_anonymous2(out, in.RegisteredCountry)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"represented_country\":")
	easyjson_1007f982_encode_anonymous5(out, in.RepresentedCountry)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"subdivisions\":")
	out.RawByte('[')
	for v2, v3 := range in.Subdivisions {
		if v2 > 0 {
			out.RawByte(',')
		}
		easyjson_1007f982_encode_anonymous2(out, v3)
	}
	out.RawByte(']')
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"traits\":")
	easyjson_1007f982_encode_anonymous6(out, in.Traits)
	out.RawByte('}')
}
func (v City) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_1007f982_encode_github_com_oschwald_geoip2service_model_City(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v City) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_1007f982_encode_github_com_oschwald_geoip2service_model_City(w, v)
}
func (v *City) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_1007f982_decode_github_com_oschwald_geoip2service_model_City(&r, v)
	return r.Error()
}
func (v *City) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_1007f982_decode_github_com_oschwald_geoip2service_model_City(l, v)
}
func easyjson_1007f982_decode_anonymous6(in *jlexer.Lexer, out *struct {
	IsAnonymousProxy    bool "json:\"is_anonymous_proxy\" maxminddb:\"is_anonymous_proxy\""
	IsSatelliteProvider bool "json:\"is_satellite_provider\" maxminddb:\"is_satellite_provider\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_anonymous_proxy":
			out.IsAnonymousProxy = bool(in.Bool())
		case "is_satellite_provider":
			out.IsSatelliteProvider = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_1007f982_encode_anonymous6(out *jwriter.Writer, in struct {
	IsAnonymousProxy    bool "json:\"is_anonymous_proxy\" maxminddb:\"is_anonymous_proxy\""
	IsSatelliteProvider bool "json:\"is_satellite_provider\" maxminddb:\"is_satellite_provider\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"is_anonymous_proxy\":")
	out.Bool(bool(in.IsAnonymousProxy))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"is_satellite_provider\":")
	out.Bool(bool(in.IsSatelliteProvider))
	out.RawByte('}')
}
func easyjson_1007f982_decode_anonymous5(in *jlexer.Lexer, out *struct {
	GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
	IsoCode   string            "json:\"iso_code\" maxminddb:\"iso_code\""
	Names     map[string]string "json:\"names\" maxminddb:\"names\""
	Type      string            "json:\"type\" maxminddb:\"type\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "geoname_id":
			out.GeoNameID = uint(in.Uint())
		case "iso_code":
			out.IsoCode = string(in.String())
		case "names":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Names = make(map[string]string)
				} else {
					out.Names = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Names)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_1007f982_encode_anonymous5(out *jwriter.Writer, in struct {
	GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
	IsoCode   string            "json:\"iso_code\" maxminddb:\"iso_code\""
	Names     map[string]string "json:\"names\" maxminddb:\"names\""
	Type      string            "json:\"type\" maxminddb:\"type\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"geoname_id\":")
	out.Uint(uint(in.GeoNameID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"iso_code\":")
	out.String(string(in.IsoCode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"names\":")
	if in.Names == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5_first := true
		for v5_name, v5_value := range in.Names {
			if !v5_first {
				out.RawByte(',')
			}
			v5_first = false
			out.String(string(v5_name))
			out.RawByte(':')
			out.String(string(v5_value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}
func easyjson_1007f982_decode_anonymous4(in *jlexer.Lexer, out *struct {
	Code string "json:\"code\" maxminddb:\"code\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_1007f982_encode_anonymous4(out *jwriter.Writer, in struct {
	Code string "json:\"code\" maxminddb:\"code\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"code\":")
	out.String(string(in.Code))
	out.RawByte('}')
}
func easyjson_1007f982_decode_anonymous3(in *jlexer.Lexer, out *struct {
	AccuracyRadius uint16  "json:\"accuracy_radius\" maxminddb:\"accuracy_radius\""
	Latitude       float64 "json:\"latitude\" maxminddb:\"latitude\""
	Longitude      float64 "json:\"longitude\" maxminddb:\"longitude\""
	MetroCode      uint    "json:\"metro_code\" maxminddb:\"metro_code\""
	TimeZone       string  "json:\"time_zone\" maxminddb:\"time_zone\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accuracy_radius":
			out.AccuracyRadius = uint16(in.Uint16())
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		case "metro_code":
			out.MetroCode = uint(in.Uint())
		case "time_zone":
			out.TimeZone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_1007f982_encode_anonymous3(out *jwriter.Writer, in struct {
	AccuracyRadius uint16  "json:\"accuracy_radius\" maxminddb:\"accuracy_radius\""
	Latitude       float64 "json:\"latitude\" maxminddb:\"latitude\""
	Longitude      float64 "json:\"longitude\" maxminddb:\"longitude\""
	MetroCode      uint    "json:\"metro_code\" maxminddb:\"metro_code\""
	TimeZone       string  "json:\"time_zone\" maxminddb:\"time_zone\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"accuracy_radius\":")
	out.Uint16(uint16(in.AccuracyRadius))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"latitude\":")
	out.Float64(float64(in.Latitude))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longitude\":")
	out.Float64(float64(in.Longitude))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"metro_code\":")
	out.Uint(uint(in.MetroCode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"time_zone\":")
	out.String(string(in.TimeZone))
	out.RawByte('}')
}
func easyjson_1007f982_decode_anonymous2(in *jlexer.Lexer, out *struct {
	GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
	IsoCode   string            "json:\"iso_code\" maxminddb:\"iso_code\""
	Names     map[string]string "json:\"names\" maxminddb:\"names\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "geoname_id":
			out.GeoNameID = uint(in.Uint())
		case "iso_code":
			out.IsoCode = string(in.String())
		case "names":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Names = make(map[string]string)
				} else {
					out.Names = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.Names)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_1007f982_encode_anonymous2(out *jwriter.Writer, in struct {
	GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
	IsoCode   string            "json:\"iso_code\" maxminddb:\"iso_code\""
	Names     map[string]string "json:\"names\" maxminddb:\"names\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"geoname_id\":")
	out.Uint(uint(in.GeoNameID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"iso_code\":")
	out.String(string(in.IsoCode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"names\":")
	if in.Names == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v7_first := true
		for v7_name, v7_value := range in.Names {
			if !v7_first {
				out.RawByte(',')
			}
			v7_first = false
			out.String(string(v7_name))
			out.RawByte(':')
			out.String(string(v7_value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}
func easyjson_1007f982_decode_anonymous1(in *jlexer.Lexer, out *struct {
	Code      string            "json:\"code\" maxminddb:\"code\""
	GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
	Names     map[string]string "json:\"names\" maxminddb:\"names\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "geoname_id":
			out.GeoNameID = uint(in.Uint())
		case "names":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Names = make(map[string]string)
				} else {
					out.Names = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Names)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_1007f982_encode_anonymous1(out *jwriter.Writer, in struct {
	Code      string            "json:\"code\" maxminddb:\"code\""
	GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
	Names     map[string]string "json:\"names\" maxminddb:\"names\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"code\":")
	out.String(string(in.Code))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"geoname_id\":")
	out.Uint(uint(in.GeoNameID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"names\":")
	if in.Names == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v9_first := true
		for v9_name, v9_value := range in.Names {
			if !v9_first {
				out.RawByte(',')
			}
			v9_first = false
			out.String(string(v9_name))
			out.RawByte(':')
			out.String(string(v9_value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}
func easyjson_1007f982_decode_anonymous(in *jlexer.Lexer, out *struct {
	GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
	Names     map[string]string "json:\"names\" maxminddb:\"names\""
}) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "geoname_id":
			out.GeoNameID = uint(in.Uint())
		case "names":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Names = make(map[string]string)
				} else {
					out.Names = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 string
					v10 = string(in.String())
					(out.Names)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_1007f982_encode_anonymous(out *jwriter.Writer, in struct {
	GeoNameID uint              "json:\"geoname_id\" maxminddb:\"geoname_id\""
	Names     map[string]string "json:\"names\" maxminddb:\"names\""
}) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"geoname_id\":")
	out.Uint(uint(in.GeoNameID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"names\":")
	if in.Names == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v11_first := true
		for v11_name, v11_value := range in.Names {
			if !v11_first {
				out.RawByte(',')
			}
			v11_first = false
			out.String(string(v11_name))
			out.RawByte(':')
			out.String(string(v11_value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}
